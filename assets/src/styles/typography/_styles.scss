@use "sass:math";

$type-scales: (
        "minorSecond": 1.067,
        "majorSecond": 1.125,
        "minorThird": 1.2,
        "majorThird": 1.25,
        "perfectFourth": 1.333,
        "augmentedFourth": 1.414,
        "perfectFifth": 1.5,
        "goldenRatio": 1.618,
);

@function type-ratio($scale) {
    @if (map-get($type-scales, $scale)) {
        @return map-get($type-scales, $scale);
    } @else if(type-of($scale) == number) {
        @return $scale;
    } @else {
        @error "$type-scale must an integer or one of the allowed strings from $type-scales";
    }
}

$type-base-size: 1rem !default;
$type-scale: "perfectFourth" !default;

$type-scale-ratio: type-ratio($type-scale);

$type-levels: 5, 4, 3, 2, 1;

$level-size: $type-base-size;

@each $level in $type-levels {

    $level-size: $level-size * $type-scale-ratio;

    h#{$level},
    .h#{$level} {
        font-size: $level-size;

        @if ($type-scale-ratio > 1.2) {

            $level-unitless: math.div($level-size, $level-size * 0 + 1);

            $fluid-reduction: if($level-size > 4, 0.5, 0.33);
            $fluid-min: $level-unitless - ($fluid-reduction * $level-unitless);

            $fluid-min: if($fluid-min > $type-base-size, $fluid-min, 1);

            $fluid-scaler: ($level-unitless - $fluid-min) + 4vw;

            font-size: clamp(
                    #{$fluid-min}rem,
                    #{$fluid-scaler} + 1rem,
                    #{$level-size}
            );

        }
    }
}
:is(h1, h2, h3, h4, .h1, .h2, .h3, .h4, h5) {
    margin: {
        bottom: 0.65em;
    }
    font: {
        weight: var(--font-weight-normal);
    }
    line: {
        height: calc(2px + 2ex + 2px);
    }
    overflow: {
        wrap: break-word;
    }
    hyphens: auto;
}

$content-selectors: "article, .content" !default;
$content-spacer: 1em !default;

#{$content-selectors} {
    --content-spacer: #{$content-spacer};

    > * + *,
    ul:not([class]) li + li,
    ol:not([class]) li + li {
        margin-top: var(--content-spacer);
    }

    :is(h2, h3:not(h2 + *)):not(:first-child) {
        margin-top: 2em;
    }

    ul + p {
        margin-top: calc(var(--content-spacer) * 2);
    }

    > a:not([class]) {
        display: inline-block;
    }

    blockquote {
        margin-top: 2em;
        margin-bottom: 2em;
        padding: 0.5em 1.5em;
        border-left: 2px solid var(--color-primary);
        font-size: 1rem * $type-scale-ratio;
    }

    hr {
        margin: 8vh 5vw;
        border-style: dashed;
        border-color: var(--color-primary);
    }
}

strong {
    font-weight: var(--font-weight-bold);
}
